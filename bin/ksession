#!/bin/bash

# KSession
# Last modified: Mon Mar 24 2025, 18.52

# Define constants for paths
VERSION="1.3.0"
SESSION_DIR="$HOME/.config/ksession/sessions"
mkdir -p "$SESSION_DIR"

# Helper function to ensure a session name is provided
require_session_name() {
	if [ -z "$1" ]; then
		echo "Error: Session name must be provided."
		exit 1
	fi
}

# Helper function to get the session file path
get_session_path() {
	echo "$SESSION_DIR/$1.txt"
}

# Function to save the state of the terminal
save_state() {
	require_session_name "$1"
	local state_file
	state_file=$(get_session_path "$1")

	kitty @ ls | jq -r '.[0].tabs[] | "\(.title) \(.windows[0].cwd)"' >"$state_file"
	echo "Kitty state saved to $state_file"
}

# Function to restore the state of the terminal
restore_state() {
	require_session_name "$1"
	local state_file
	state_file=$(get_session_path "$1")

	if [ ! -f "$state_file" ]; then
		echo "No state file found at $state_file"
		exit 1
	fi

	local tab_number=0
	while IFS=' ' read -r title cwd; do
		[ -z "$title" ] && continue

		local numbered_title="$((tab_number + 1)). $title"

		if [ $tab_number -eq 0 ]; then
			kitty @ set-tab-title "$numbered_title" >/dev/null 2>&1
			kitty @ send-text "cd \"$cwd\"\n" >/dev/null 2>&1
			kitty @ set-window-title "$numbered_title"
		else
			kitty @ launch --type=tab --tab-title="$numbered_title" --cwd="$cwd" --window-title="$numbered_title" >/dev/null 2>&1
		fi
		echo "$((tab_number + 1)). opening $title at $cwd"
		((tab_number++))
	done <"$state_file"

	echo "Kitty state restored from $state_file"
}

# Function to destroy all tabs except one
destroy_tabs() {
	local tabs
	tabs=$(kitty @ ls | jq '.[0].tabs[].id')

	if [ "$(echo "$tabs" | wc -l)" -le 1 ]; then
		echo "There is only one tab open, nothing to destroy."
		exit 0
	fi

	for tab in $(echo "$tabs" | tail -n +2); do
		kitty @ close-tab --match id:"$tab"
	done

	echo "All tabs except one have been destroyed."
}

# Function to list available sessions
list_sessions() {
	echo "Available sessions:"
	ls -1 "$SESSION_DIR"/*.txt 2>/dev/null | sed 's|^.*/||; s/\.txt$//'
}

# Function to view session content
view_session() {
	require_session_name "$1"
	local state_file
	state_file=$(get_session_path "$1")

	if [ ! -f "$state_file" ]; then
		echo "No session file found with the name $1."
		exit 1
	fi

	echo "Session content for $1:"
	while IFS= read -r line; do
		title=$(echo "$line" | awk '{print $1}')
		cwd=$(echo "$line" | awk '{print $2}')
		echo "Title: $title, CWD: $cwd"
	done <"$state_file"
}

# Main argument handling
case "$1" in
save | -s)
	save_state "$2"
	;;
restore | -r)
	restore_state "$2"
	;;
destroy | -d)
	destroy_tabs
	;;
list | -l)
	list_sessions
	;;
view | -v)
	view_session "$2"
	;;
version | --version)
	echo "KSession version $VERSION"
	exit 0
	;;
*)
	echo "Usage: ksession {save|-s|restore|-r|destroy|-d|list|-l|view|-v|version|--version}"
	exit 1
	;;
esac
