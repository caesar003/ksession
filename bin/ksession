#!/bin/bash

# KSession
# Last modified: Sat Aug 02 2025, 03.07

# Define constants for paths
VERSION="1.4.4"
SESSION_DIR="$HOME/.config/ksession/sessions"
mkdir -p "$SESSION_DIR"

# Load configuration
load_config() {
	local config_file="$HOME/.config/ksession/config"
	if [ -f "$config_file" ]; then
		source "$config_file"
	fi
	EDITOR_CMD="${EDITOR_CMD:-nvim}" # default to nvim
}

resolve_editor() {
	if [ -n "$EDITOR_CMD" ]; then
		echo "$EDITOR_CMD"
	elif command -v code >/dev/null 2>&1; then
		echo "code --wait"
	elif command -v nvim >/dev/null 2>&1; then
		echo "nvim"
	elif command -v vim >/dev/null 2>&1; then
		echo "vim"
	elif command -v nano >/dev/null 2>&1; then
		echo "nano"
	elif [ -n "$EDITOR" ]; then
		echo "$EDITOR"
	else
		echo "echo 'No suitable editor found. Please set EDITOR_CMD in ~/.config/ksession/config or install an editor.'" >&2
		exit 1
	fi
}

# Helper function to ensure a session name is provided
require_session_name() {
	if [ -z "$1" ]; then
		echo "Error: Session name must be provided."
		exit 1
	fi
}

# Helper function to get the session file path
get_session_path() {
	echo "$SESSION_DIR/$1.txt"
}

# Function to save the state of the terminal
save_state() {
	require_session_name "$1"
	local state_file
	state_file=$(get_session_path "$1")

	kitty @ ls | jq -r '.[0].tabs[] | "\(.title) \(.windows[0].cwd)"' >"$state_file"
	echo "Kitty state saved to $state_file"
}

# Function to restore the state of the terminal
restore_state() {
	require_session_name "$1"
	local state_file
	state_file=$(get_session_path "$1")

	if [ ! -f "$state_file" ]; then
		echo "No state file found at $state_file"
		exit 1
	fi

	local tab_number=0
	while IFS=' ' read -r title cwd; do
		[ -z "$title" ] && continue

		# Expand tilde notation to handle ~/path formats
		if [[ "$cwd" == "~"* ]]; then
			cwd="${cwd/#\~/$HOME}"
		fi

		local numbered_title="$((tab_number + 1)). $title"

		if [ $tab_number -eq 0 ]; then
			kitty @ set-tab-title "$numbered_title" >/dev/null 2>&1
			kitty @ send-text "cd \"$cwd\"\n" >/dev/null 2>&1
			kitty @ set-window-title "$numbered_title"

		else
			kitty @ launch --type=tab --tab-title="$numbered_title" --cwd="$cwd" --window-title="$numbered_title" >/dev/null 2>&1
		fi
		echo "$((tab_number + 1)). opening $title at $cwd"
		((tab_number++))
	done <"$state_file"

	echo "Kitty state restored from $state_file"
}

# Function to destroy all tabs except one
destroy_tabs() {
	local tabs
	tabs=$(kitty @ ls | jq '.[0].tabs[].id')

	if [ "$(echo "$tabs" | wc -l)" -le 1 ]; then
		echo "There is only one tab open, nothing to destroy."
		exit 0
	fi

	for tab in $(echo "$tabs" | tail -n +2); do
		kitty @ close-tab --match id:"$tab"
	done

	echo "All tabs except one have been destroyed."
}

# Function to list available sessions
list_sessions() {
	echo "Available sessions:"
	ls -1 "$SESSION_DIR"/*.txt 2>/dev/null | sed 's|^.*/||; s/\.txt$//'
}

# Function to view session content
view_session() {
	require_session_name "$1"
	local state_file
	state_file=$(get_session_path "$1")

	if [ ! -f "$state_file" ]; then
		echo "No session file found with the name $1."
		exit 1
	fi

	echo "Session content for $1:"
	while IFS= read -r line; do
		title=$(echo "$line" | awk '{print $1}')
		cwd=$(echo "$line" | awk '{print $2}')
		echo "Title: $title, CWD: $cwd"
	done <"$state_file"
}

show_help() {
	cat <<EOF
KSession - Save and restore Kitty terminal sessions
Usage:
  ksession <command> [session_name]

Commands:
  save     | -s    Save the current Kitty session state
  restore  | -r    Restore a previously saved session
  destroy  | -d    Destroy all tabs except the first one
  list     | -l    List all saved sessions
  view     | -v    View the contents of a saved session
  edit     | -e    Edit a saved session file in your preferred editor
  version  | --version  Show the current version of KSession

Examples:
  ksession save mysession         Save the current session as 'mysession'
  ksession restore mysession      Restore the 'mysession' session
  ksession destroy                Close all tabs except one
  ksession list                   Show all saved sessions
  ksession view mysession         See what tabs/dirs are stored in 'mysession'
  ksession edit mysession         Manually edit the session file in your editor

Configuration:
  To set a preferred editor, create ~/.config/ksession/config with:
    EDITOR_CMD="code --wait"   # or "vim", "nvim", "nano", etc.

  Sessions files can be defined in ~/.config/ksession/sessions/<session-name>.txt
    Paths support both tilde notation (~/) and absolute paths (/home/user/)
    Example session file:

    todo ~/projects/todo
    alarm-clock ~/projects/alarm-clock
    config ~/.config
    music ~/.music

Default editor fallback order: code → nvim → vim → nano → \$EDITOR

EOF
}

# Function to edit a session file
edit_session() {
	require_session_name "$1"
	local state_file
	state_file=$(get_session_path "$1")

	if [ ! -f "$state_file" ]; then
		echo "No session file found with the name $1."
		exit 1
	fi

	load_config
	local editor
	editor=$(resolve_editor)

	$editor "$state_file"
}

# Main argument handling
case "$1" in
save | -s)
	save_state "$2"
	;;
restore | -r)
	restore_state "$2"
	;;
destroy | -d)
	destroy_tabs
	;;
list | -l)
	list_sessions
	;;
view | -v)
	view_session "$2"
	;;
edit | -e)
	edit_session "$2"
	;;
version | --version)
	echo "KSession version $VERSION"
	exit 0
	;;
*)
	show_help
	exit 1
	;;
esac
